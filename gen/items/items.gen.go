
// Do not edit! Autogenerated file //

package items

import "gostories/things"

// Items contains all the items a player can pick up. It is currently indexed by the item name, however ideally 
// it should be indexed by an enum/custom int and this should be the only place to access items.
var Items = map[string]things.Item {
        "collar": ItemCollar,
        "shrubbery": ItemShrubbery,
        "sardines": ItemSardines,
}


// ItemCollar probably should remove this and only access structs through the map
var ItemCollar = NewCollarItem()
var collarItem *CollarItem

// CollarItem struct
type CollarItem struct {
	things.Thing
}

// GetName returns the name of the thing
func (c *CollarItem) GetName() string { return c.Name }

// GetLookText returns the description when the player looks at the thing
func (c *CollarItem) GetLookText() string { return c.LookText }

// Show makes the thing visible to the player
func (c *CollarItem) Show() { c.Thing.Visible = true }

// Hide makes the thing visible to the player
func (c *CollarItem) Hide() { c.Thing.Visible = false }

// GetThing returns the underlying Thing struct (need to review if this is used)
func (c *CollarItem) GetThing() *things.Thing { return &c.Thing }


// Take will be used for the player to take the item into the inventory (currently not needed)
func (c *CollarItem) Take() {}

// Toggle is used to equip an equippable item, or unequip it is already equipped
func (c *CollarItem) Toggle() {}

// NewCollarItem creates a new CollarItem. Probably will unexport this soon.
func NewCollarItem() *CollarItem {
	if collarItem == nil {
		collarItem = &CollarItem{}
		collarItem.Name = "collar"
		collarItem.LookText = "A small red cat collar with a bell."
	}
	return collarItem
}

// ItemShrubbery probably should remove this and only access structs through the map
var ItemShrubbery = NewShrubberyItem()
var shrubberyItem *ShrubberyItem

// ShrubberyItem struct
type ShrubberyItem struct {
	things.Thing
}

// GetName returns the name of the thing
func (c *ShrubberyItem) GetName() string { return c.Name }

// GetLookText returns the description when the player looks at the thing
func (c *ShrubberyItem) GetLookText() string { return c.LookText }

// Show makes the thing visible to the player
func (c *ShrubberyItem) Show() { c.Thing.Visible = true }

// Hide makes the thing visible to the player
func (c *ShrubberyItem) Hide() { c.Thing.Visible = false }

// GetThing returns the underlying Thing struct (need to review if this is used)
func (c *ShrubberyItem) GetThing() *things.Thing { return &c.Thing }


// Take will be used for the player to take the item into the inventory (currently not needed)
func (c *ShrubberyItem) Take() {}

// NewShrubberyItem creates a new ShrubberyItem. Probably will unexport this soon.
func NewShrubberyItem() *ShrubberyItem {
	if shrubberyItem == nil {
		shrubberyItem = &ShrubberyItem{}
		shrubberyItem.Name = "shrubbery"
		shrubberyItem.LookText = "A small but rather well cared for shrubbery."
	}

	shrubberyItem.Show()
	return shrubberyItem
}

// ItemSardines probably should remove this and only access structs through the map
var ItemSardines = NewSardinesItem()
var sardinesItem *SardinesItem

// SardinesItem struct
type SardinesItem struct {
	things.Thing
}

// GetName returns the name of the thing
func (c *SardinesItem) GetName() string { return c.Name }

// GetLookText returns the description when the player looks at the thing
func (c *SardinesItem) GetLookText() string { return c.LookText }

// Show makes the thing visible to the player
func (c *SardinesItem) Show() { c.Thing.Visible = true }

// Hide makes the thing visible to the player
func (c *SardinesItem) Hide() { c.Thing.Visible = false }

// GetThing returns the underlying Thing struct (need to review if this is used)
func (c *SardinesItem) GetThing() *things.Thing { return &c.Thing }


// Take will be used for the player to take the item into the inventory (currently not needed)
func (c *SardinesItem) Take() {}

// NewSardinesItem creates a new SardinesItem. Probably will unexport this soon.
func NewSardinesItem() *SardinesItem {
	if sardinesItem == nil {
		sardinesItem = &SardinesItem{}
		sardinesItem.Name = "sardines"
		sardinesItem.LookText = "A tin of tasty sardines preserved in olive oil."
	}

	sardinesItem.Show()
	return sardinesItem
}
